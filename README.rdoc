= slurper

Slurper allows you to quickly compose your stories in a text file and import them into Pivotal Tracker.

Works great with slurper.vim! (http://github.com/adamlowe/vim-slurper)

== Note on Patches/Pull Requests

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request.

== Setup

  $gem install eslurper

== Config

Slurper requires a slurper_config.yml file in your working directory. This file contains your Tracker API and story requestor information.

=== Example

  project_id: 1234
  epic_features_project_id: 1234
  token: 123abc123abc123abc
  requested_by: Jane Stakeholder
  ssl: true

The project_id tells tracker which project to add your stories to. It can be found on the project settings or the url for the project.

The epic_features_project_id tells tracker which project to pull stories when builing an epic. It can be found on the project settings or the url for the project.

The token can be found on your personal profile page in Pivotal Tracker.

The requested_by field should be the name of your project stakeholder exactly as it appears in tracker.

The ssl field should be set to true if you've enabled "Use HTTPS" in Pivotal Tracker.
SSL is being verified by peer using the cacert.pem from (http://curl.haxx.se/ca)

== Usage

Create a stories.slurper file and compose your stories in the slurper story format. In your working directory use the slurp command to import your stories from the stories.slurper file into Pivotal Tracker. Slurper looks for a stories.slurper file in your current directory by default, however, you can provide an alternate story source file if necessary.

Default

  $eslurp ~/stories.slurper
  
Also valid

  $eslurp ~/special_stories.slurper
  
Or even

  $eslurp ~/mystories.txt

=== Example stories.slurper

  ==
  story_type:
    chore
  name:
    Set Up Staging Environment
  description:
    Set up and configure staging environment for approval of stories

  labels:
    
  ==
  story_type:
    feature
  name:
    Campaign Manager Does Something
  description:
    In order to get some value
    As a campaign manager
    I want to do something

    - can do something

  labels:
    campaign managers
  ==
  story_type:
    feature
  name:
    Campaign Manager EPIC
  description:
    In order to get some value
    As a campaign manager
    I want to do something

    - can do something

  labels:
    campaign, epic
  ==
  story_type:
    release
  name:
    Big Release
  description:
    This release marks a lot of awesome functionality

  labels:
    
  ==
  story_type:
    bug
  name:
    I did something and nothing happened
  description:
    When I do something, another thing is supposed to happen but I see an error screen instead.

  labels:
    

=== Epics
if the feature has a label of 'epic', eslurper will create an epic feature. You must include one other label for the epic to pull stories.  Eslurper will use the epic_features_project_id to pull stories with the same non-"epic" label.
It will create add a link to the label search and a list of the related stories.

eg.
Label Search
https://www.pivotaltracker.com/projects/264623?label=rental

http://www.pivotaltracker.com/story/show/19906825
http://www.pivotaltracker.com/story/show/16421895

Because of limitations with the pivotal api, the labels linking stories to epics must not contain whitespace. eslurper will only use the first label as the linking label, also because of a limitation on the pivotal api.

Note: the story source file is whitespace-sensitive. Be sure the value for each key phrase is indented with two spaces beneath each key phrase. Also, start each story with a double-equals on its own line.

Your best bet is to leverage slurper.vim and benefit from its auto-indenting goodness.

Credit - Wes Gibbs (http://wgibbs.github.com) thought of and wrote slurper as a ruby script. It was later packaged and released as a gem by his fellow Rocketeers after using it and finding it extremely handy.
